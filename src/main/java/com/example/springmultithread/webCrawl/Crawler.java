package com.example.springmultithread.webCrawl;


import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTable;
import com.example.springmultithread.controller.CrawlerController;

import java.util.*;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.atomic.AtomicInteger;


public class Crawler{

    protected final Integer PAGE_LIMIT = 100;
    protected Set<String> pagesVisited = new HashSet<>();
    protected ArrayList<String> pageQueue = new ArrayList<>();
    protected ExecutorService execService;
    protected AtomicInteger count= new AtomicInteger();
    protected String id;
    protected Integer threads;



    public Crawler(){}

    //nextURL should be synchronized to prevent searching of same url
    protected synchronized String nextUrl(String...url){
            if(!this.pagesVisited.contains(url[0]))this.pageQueue.add(url[0]);

            String nextUrl = "";

            do {
                if (pageQueue.isEmpty()) break;
                nextUrl = pageQueue.remove(0);

            } while (pagesVisited.contains(nextUrl));

            if (!nextUrl.isEmpty()) pagesVisited.add(nextUrl);

            return nextUrl;

    }
    protected synchronized Integer pagesVisited(){
        return this.pagesVisited.size();
    }

    public void setConcurrency(Integer num){
        this.execService = Executors.newFixedThreadPool(num);
        this.threads = num;
    }

    public void search(String url, String searchItem){
        System.out.println("now searching: "+url+" for word: "+searchItem);
        this.pagesVisited.clear();
        this.pageQueue.clear();
        this.count.set(0);

        for(int i=0; i<threads;i++) {
            execService.submit(() -> {
                CrawlerController controller = new CrawlerController();
                while(this.pagesVisited() < PAGE_LIMIT) {
                    String currentUrl = this.nextUrl(url);//synchronized
                    //links return a null link for unknown amount of time.
                    ArrayList<String> links = controller.crawl(currentUrl, searchItem);

                    //wordSearch is class level synchronized on the controller instances' htmlDoc
                    if(controller.wordSearch(searchItem))count.incrementAndGet();

                    synchronized (this) {
                        for(String link: links){
                            if(!this.pageQueue.contains(link))this.pageQueue.add(link);
                        }
                        System.out.println("Current Thread: "+Thread.currentThread().getId());
                        System.out.println("Pages Visited So Far: "+this.pagesVisited());
                        System.out.println("words found: "+count.get());
                    }

                }
            });
        }
    }

    @DynamoDBHashKey(attributeName = "Id")
    @DynamoDBAutoGeneratedKey
    public String getId() {
        return id;
    }

    public void setId(String id){
        this.id = id;
    }

    public Integer getCount(){
        return this.count.get();
    }

}
